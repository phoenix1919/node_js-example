# Javascript Node CircleCI 2.0 configuration file 
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
orbs:
  aws-cli: circleci/aws-cli@0.1.4
  aws-ecs: circleci/aws-ecs@0.0.3
  azure-cli: circleci/azure-cli@1.1.0
  clair-scanner: ovotech/clair-scanner@1.4.26
jobs:
  key-scan:
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: Install git
          command: apk add git
      - checkout
      - run: 
          name: Get and extract repo scanner
          command: | 
            wget 'https://github.com/UKHomeOffice/repo-security-scanner/releases/download/0.4.0/scanrepo-0.4.0-linux-amd64.tar.gz' &&
            tar -xf scanrepo-0.4.0-linux-amd64.tar.gz
      - run:
          name: Scan repo
          command: git log -p | ./scanrepo
  test:
    docker:
      # specify the version you desire here
      - image: circleci/node:7.10

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: yarn install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      # run tests!
      - run: yarn test
      
  build_docker:
    docker:
      - image: circleci/node:7.10
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Setup common environment variables
          command: |
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:${CIRCLE_SHA1}"' >> $BASH_ENV
      - run: 'docker build -t circle_docker_test:latest .'
      # Could push up to a registry at this stage
      - run: 'mkdir docker_image && docker save -o docker_image/circleci_built_container.tar circle_docker_test:latest'
      - store_artifacts:
          path: docker_image/circleci_built_container.tar
          destination: circleci_built_container.tar
      - persist_to_workspace:
          root: .
          paths:
            - docker_image

# Manually setup as orb won't work with the unpushed image.
# TODO: Create custom Docker image for the scanner (using https://github.com/ovotech/clair-scanner-docker/blob/master/Dockerfile) rather than using theirs
  vuln_scan:
    docker:
      - image: ovotech/clair-scanner@sha256:6fd950030d971317b3b8ee5efcc45f0c3cf624b68cf741c83f787a9dde9917cc
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - run:
          name: Load image
          command: |
            docker load --input workspace/docker_image/circleci_built_container.tar
      - run:
          name: Setup scanning variables
          command: |
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:${CIRCLE_SHA1}"' >> $BASH_ENV;
            echo 'export THRESHOLD="High"' >> $BASH_ENV;
            echo 'export IMAGE="circle_docker_test:latest"' >> $BASH_ENV;
            echo 'export FAIL_ON_VULN="true"' >> $BASH_ENV;
      - run:
          name: "Vulnerability scan"
          command: |
            chmod +x .circleci/vuln_scan.sh && .circleci/vuln_scan.sh
        

  deploy_docker_aws:
    docker:
      - image: circleci/python:3.6.1
    environment:
      AWS_DEFAULT_OUTPUT: json
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - aws-cli/install
      - aws-cli/configure:
          aws-access-key-id: "$AWS_ACCESS_KEY_ID"
          aws-region: "$AWS_DEFAULT_REGION"
      - run:
          name: Load image
          command: |
            docker load --input workspace/docker_image/circleci_built_container.tar
      - run:
          name: Setup common environment variables
          command: |
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:${CIRCLE_SHA1}"' >> $BASH_ENV
            echo 'export LATEST_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:latest"' >> $BASH_ENV
      - run:
          name: Tag image correctly
          command: |
            docker tag circle_docker_test:latest $FULL_IMAGE_NAME
      - run:
          name: Tag image with :latest as well
          command: |
            docker tag $FULL_IMAGE_NAME $LATEST_IMAGE_NAME
      - run:
          name: Push image tags
          command: |
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker push $FULL_IMAGE_NAME
            docker push $LATEST_IMAGE_NAME

  deploy_docker_azure:
    docker:
      - image: microsoft/azure-cli
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - azure-cli/install
      - azure-cli/login-with-service-principal
      - run:
          name: Load image
          command: |
            docker load --input workspace/docker_image/circleci_built_container.tar
      - run:
          name: Setup common environment variables
          command: |
            echo 'export FULL_IMAGE_NAME="phil30516test.azurecr.io/circleci:${CIRCLE_SHA1}"' >> $BASH_ENV
      - run:
          name: Tag image correctly
          command: |
            docker tag circle_docker_test:latest $FULL_IMAGE_NAME
      - run:
          name: Push image
          command: |
            eval $(az acr login --name phil30516test)
            docker push $FULL_IMAGE_NAME

workflows:
  version: 2
  all:
    jobs:
      - key-scan
      - test
      - build_docker:
          requires:
            - test
            - key-scan
      - vuln_scan:
          requires:
            - build_docker
      - deploy_docker_aws:
          requires:
            - vuln_scan
      - deploy_docker_azure:
          requires:
            - vuln_scan
